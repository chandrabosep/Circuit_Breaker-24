/**
 * @module @bandada/api-sdk
 * @version 1.1.0
 * @file A Typescript SDK for the Bandada API.
 * @copyright Ethereum Foundation 2023
 * @license MIT
 * @see [Github]{@link https://github.com/privacy-scaling-explorations/bandada/tree/main/libs/api-sdk}
*/
'use strict';

var utils = require('@bandada/utils');

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

exports.SupportedUrl = void 0;
(function (SupportedUrl) {
    SupportedUrl["DEV"] = "http://localhost:3000";
    SupportedUrl["PROD"] = "https://api.bandada.pse.dev";
})(exports.SupportedUrl || (exports.SupportedUrl = {}));

/**
 * Check if the parameter type is correct.
 * @param value Parameter value.
 * @param name Parameter name.
 * @param type Expected parameter type.
 */
function checkParameter(value, name, type) {
    if (typeof value !== type) {
        throw new TypeError("Parameter '".concat(name, "' is not ").concat(type === "object" ? "an" : "a", " ").concat(type));
    }
}

var url$1 = "/groups";
/**
 * Returns the list of groups.
 * @returns List of groups.
 */
function getGroups(config) {
    return __awaiter(this, void 0, void 0, function () {
        var groups;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils.request(url$1, config)];
                case 1:
                    groups = _a.sent();
                    groups.map(function (group) { return (__assign(__assign({}, group), { credentials: JSON.parse(group.credentials) })); });
                    return [2 /*return*/, groups];
            }
        });
    });
}
/**
 * Returns a specific group.
 * @param groupId Group id.
 * @returns Specific group.
 */
function getGroup(config, groupId) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, group;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url$1, "/").concat(groupId);
                    return [4 /*yield*/, utils.request(requestUrl, config)];
                case 1:
                    group = _a.sent();
                    group.credentials = JSON.parse(group.credentials);
                    return [2 /*return*/, group];
            }
        });
    });
}
/**
 * Returns true if the member is in the group and false otherwise.
 * @param groupId Group id.
 * @param memberId Member id.
 * @returns true or false.
 */
function isGroupMember(config, groupId, memberId) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, isMember;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url$1, "/").concat(groupId, "/members/").concat(memberId);
                    return [4 /*yield*/, utils.request(requestUrl, config)];
                case 1:
                    isMember = _a.sent();
                    return [2 /*return*/, isMember];
            }
        });
    });
}
/**
 * Returns the Merkle Proof for a member in a group.
 * @param groupId Group id.
 * @param memberId Member id.
 * @returns the Merkle Proof.
 */
function generateMerkleProof(config, groupId, memberId) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, merkleProof;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url$1, "/").concat(groupId, "/members/").concat(memberId, "/proof");
                    return [4 /*yield*/, utils.request(requestUrl, config)];
                case 1:
                    merkleProof = _a.sent();
                    return [2 /*return*/, merkleProof];
            }
        });
    });
}
/**
 * Adds a member to a group using an API Key.
 * @param groupId Group id.
 * @param memberId Member id.
 * @param apiKey API Key.
 * @returns undefined.
 */
function addMemberByApiKey(config, groupId, memberId, apiKey) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, newConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url$1, "/").concat(groupId, "/members/").concat(memberId);
                    newConfig = __assign({ method: "post" }, config);
                    newConfig.headers["x-api-key"] = apiKey;
                    return [4 /*yield*/, utils.request(requestUrl, newConfig)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Adds members to a group using an API Key.
 * @param groupId Group id.
 * @param memberIds Member ids.
 * @param apiKey API Key.
 * @returns undefined.
 */
function addMembersByApiKey(config, groupId, memberIds, apiKey) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, newConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url$1, "/").concat(groupId, "/members");
                    newConfig = __assign({ method: "post", data: {
                            memberIds: memberIds
                        } }, config);
                    newConfig.headers["x-api-key"] = apiKey;
                    return [4 /*yield*/, utils.request(requestUrl, newConfig)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Adds a member to a group using an Invite Code.
 * @param groupId Group id.
 * @param memberId Member id.
 * @param inviteCode Invite Code.
 * @returns undefined.
 */
function addMemberByInviteCode(config, groupId, memberId, inviteCode) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, newConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url$1, "/").concat(groupId, "/members/").concat(memberId);
                    newConfig = __assign({ method: "post", data: {
                            inviteCode: inviteCode
                        } }, config);
                    return [4 /*yield*/, utils.request(requestUrl, newConfig)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Removes a member from a group using an API Key.
 * @param groupId Group id.
 * @param memberId Member id.
 * @param apiKey API Key.
 * @returns undefined.
 */
function removeMemberByApiKey(config, groupId, memberId, apiKey) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, newConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url$1, "/").concat(groupId, "/members/").concat(memberId);
                    newConfig = __assign({ method: "delete" }, config);
                    newConfig.headers["x-api-key"] = apiKey;
                    return [4 /*yield*/, utils.request(requestUrl, newConfig)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Removes multiple members from a group using an API Key.
 * @param groupId Group id.
 * @param memberIds Member ids.
 * @param apiKey API Key.
 * @returns undefined.
 */
function removeMembersByApiKey(config, groupId, memberIds, apiKey) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, newConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url$1, "/").concat(groupId, "/members");
                    newConfig = __assign({ method: "delete", data: {
                            memberIds: memberIds
                        } }, config);
                    newConfig.headers["x-api-key"] = apiKey;
                    return [4 /*yield*/, utils.request(requestUrl, newConfig)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}

var url = "/invites";
/**
 * Returns a specific invite.
 * @param inviteCode Invite code.
 * @returns Specific invite.
 */
function getInvite(config, inviteCode) {
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, invite;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = "".concat(url, "/").concat(inviteCode);
                    return [4 /*yield*/, utils.request(requestUrl, config)];
                case 1:
                    invite = _a.sent();
                    invite.group.credentials = JSON.parse(invite.group.credentials);
                    return [2 /*return*/, invite];
            }
        });
    });
}

var ApiSdk = /** @class */ (function () {
    /**
     * Initializes the ApiSdk object with a Supported URL or custom URL.
     * @param url Supported URL or custom URL.
     * @param config Request config.
     */
    function ApiSdk(url, config) {
        if (url === void 0) { url = exports.SupportedUrl.PROD; }
        checkParameter(url, "url", "string");
        if (config) {
            if (!config.baseURL) {
                this._config = __assign({ baseURL: url }, config);
            }
            else {
                if (url !== config.baseURL)
                    throw new Error("The url and baseURL should be the same");
                this._config = config;
            }
        }
        else {
            this._config = {
                headers: {
                    "Content-Type": "application/json"
                },
                baseURL: url
            };
        }
        this._url = url;
    }
    Object.defineProperty(ApiSdk.prototype, "url", {
        /**
         * Returns the API URL.
         * @returns API URL.
         */
        get: function () {
            return this._url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApiSdk.prototype, "config", {
        /**
         * Returns the API Config.
         * @returns API Config.
         */
        get: function () {
            return this._config;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the list of groups.
     * @returns List of groups.
     */
    ApiSdk.prototype.getGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var groups;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getGroups(this._config)];
                    case 1:
                        groups = _a.sent();
                        return [2 /*return*/, groups];
                }
            });
        });
    };
    /**
     * Returns a specific group.
     * @param groupId Group id.
     * @returns Specific group.
     */
    ApiSdk.prototype.getGroup = function (groupId) {
        return __awaiter(this, void 0, void 0, function () {
            var group;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getGroup(this._config, groupId)];
                    case 1:
                        group = _a.sent();
                        return [2 /*return*/, group];
                }
            });
        });
    };
    /**
     * Returns true if the member is in the group and false otherwise.
     * @param groupId Group id.
     * @param memberId Member id.
     * @returns true or false.
     */
    ApiSdk.prototype.isGroupMember = function (groupId, memberId) {
        return __awaiter(this, void 0, void 0, function () {
            var isMember;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, isGroupMember(this._config, groupId, memberId)];
                    case 1:
                        isMember = _a.sent();
                        return [2 /*return*/, isMember];
                }
            });
        });
    };
    /**
     * Returns the Merkle Proof for a member in a group.
     * @param groupId Group id.
     * @param memberId Member id.
     * @returns the Merkle Proof.
     */
    ApiSdk.prototype.generateMerkleProof = function (groupId, memberId) {
        return __awaiter(this, void 0, void 0, function () {
            var merkleProof;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, generateMerkleProof(this._config, groupId, memberId)];
                    case 1:
                        merkleProof = _a.sent();
                        return [2 /*return*/, merkleProof];
                }
            });
        });
    };
    /**
     * Adds a member to a group using an API Key.
     * @param groupId Group id.
     * @param memberId Member id.
     * @param apiKey API Key.
     * @returns undefined.
     */
    ApiSdk.prototype.addMemberByApiKey = function (groupId, memberId, apiKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, addMemberByApiKey(this._config, groupId, memberId, apiKey)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Adds several members to a group using an API Key.
     * @param groupId Group id.
     * @param memberIds Member ids.
     * @param apiKey API Key.
     * @returns undefined.
     */
    ApiSdk.prototype.addMembersByApiKey = function (groupId, memberIds, apiKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, addMembersByApiKey(this._config, groupId, memberIds, apiKey)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Adds a member to a group using an Invite Code.
     * @param groupId Group id.
     * @param memberId Member id.
     * @param inviteCode Invite Code.
     * @returns undefined.
     */
    ApiSdk.prototype.addMemberByInviteCode = function (groupId, memberId, inviteCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, addMemberByInviteCode(this._config, groupId, memberId, inviteCode)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes a member from a group using an API Key.
     * @param groupId Group id.
     * @param memberId Member id.
     * @param apiKey API Key.
     * @returns undefined.
     */
    ApiSdk.prototype.removeMemberByApiKey = function (groupId, memberId, apiKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, removeMemberByApiKey(this._config, groupId, memberId, apiKey)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes multiple members from a group using an API Key.
     * @param groupId Group id.
     * @param memberIds Member ids.
     * @param apiKey API Key.
     * @returns undefined.
     */
    ApiSdk.prototype.removeMembersByApiKey = function (groupId, memberIds, apiKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, removeMembersByApiKey(this._config, groupId, memberIds, apiKey)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a specific invite.
     * @param inviteCode Invite code.
     * @returns Specific invite.
     */
    ApiSdk.prototype.getInvite = function (inviteCode) {
        return __awaiter(this, void 0, void 0, function () {
            var invite;
            return __generator(this, function (_a) {
                invite = getInvite(this._config, inviteCode);
                return [2 /*return*/, invite];
            });
        });
    };
    return ApiSdk;
}());

exports.ApiSdk = ApiSdk;
