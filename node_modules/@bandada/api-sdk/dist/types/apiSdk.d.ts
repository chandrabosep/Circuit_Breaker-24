import { SupportedUrl, GroupResponse, InviteResponse } from "./types";
export default class ApiSdk {
    private _url;
    private _config;
    /**
     * Initializes the ApiSdk object with a Supported URL or custom URL.
     * @param url Supported URL or custom URL.
     * @param config Request config.
     */
    constructor(url?: SupportedUrl | string, config?: any);
    /**
     * Returns the API URL.
     * @returns API URL.
     */
    get url(): string;
    /**
     * Returns the API Config.
     * @returns API Config.
     */
    get config(): object;
    /**
     * Returns the list of groups.
     * @returns List of groups.
     */
    getGroups(): Promise<GroupResponse[]>;
    /**
     * Returns a specific group.
     * @param groupId Group id.
     * @returns Specific group.
     */
    getGroup(groupId: string): Promise<GroupResponse>;
    /**
     * Returns true if the member is in the group and false otherwise.
     * @param groupId Group id.
     * @param memberId Member id.
     * @returns true or false.
     */
    isGroupMember(groupId: string, memberId: string): Promise<boolean>;
    /**
     * Returns the Merkle Proof for a member in a group.
     * @param groupId Group id.
     * @param memberId Member id.
     * @returns the Merkle Proof.
     */
    generateMerkleProof(groupId: string, memberId: string): Promise<string>;
    /**
     * Adds a member to a group using an API Key.
     * @param groupId Group id.
     * @param memberId Member id.
     * @param apiKey API Key.
     * @returns undefined.
     */
    addMemberByApiKey(groupId: string, memberId: string, apiKey: string): Promise<void>;
    /**
     * Adds several members to a group using an API Key.
     * @param groupId Group id.
     * @param memberIds Member ids.
     * @param apiKey API Key.
     * @returns undefined.
     */
    addMembersByApiKey(groupId: string, memberIds: string[], apiKey: string): Promise<void>;
    /**
     * Adds a member to a group using an Invite Code.
     * @param groupId Group id.
     * @param memberId Member id.
     * @param inviteCode Invite Code.
     * @returns undefined.
     */
    addMemberByInviteCode(groupId: string, memberId: string, inviteCode: string): Promise<void>;
    /**
     * Removes a member from a group using an API Key.
     * @param groupId Group id.
     * @param memberId Member id.
     * @param apiKey API Key.
     * @returns undefined.
     */
    removeMemberByApiKey(groupId: string, memberId: string, apiKey: string): Promise<void>;
    /**
     * Removes multiple members from a group using an API Key.
     * @param groupId Group id.
     * @param memberIds Member ids.
     * @param apiKey API Key.
     * @returns undefined.
     */
    removeMembersByApiKey(groupId: string, memberIds: string[], apiKey: string): Promise<void>;
    /**
     * Returns a specific invite.
     * @param inviteCode Invite code.
     * @returns Specific invite.
     */
    getInvite(inviteCode: string): Promise<InviteResponse>;
}
